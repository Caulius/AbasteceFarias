// Tabela de conversão de CM para Volume (Litros)
export const dieselLevelTable: { [key: string]: number } = {
  '0.01': 5,
  '0.02': 14,
  '0.03': 26,
  '0.04': 39,
  '0.05': 55,
  '0.06': 72,
  '0.07': 91,
  '0.08': 111,
  '0.09': 132,
  '0.10': 154,
  '0.11': 178,
  '0.12': 202,
  '0.13': 228,
  '0.14': 254,
  '0.15': 281,
  '0.16': 309,
  '0.17': 338,
  '0.18': 368,
  '0.19': 398,
  '0.20': 430,
  '0.21': 461,
  '0.22': 494,
  '0.23': 527,
  '0.24': 561,
  '0.25': 595,
  '0.26': 630,
  '0.27': 666,
  '0.28': 702,
  '0.29': 738,
  '0.30': 776,
  '0.31': 813,
  '0.32': 851,
  '0.33': 890,
  '0.34': 929,
  '0.35': 969,
  '0.36': 1009,
  '0.37': 1049,
  '0.38': 1090,
  '0.39': 1131,
  '0.40': 1173,
  '0.41': 1215,
  '0.42': 1257,
  '0.43': 1300,
  '0.44': 1343,
  '0.45': 1387,
  '0.46': 1430,
  '0.47': 1474,
  '0.48': 1519,
  '0.49': 1564,
  '0.50': 1609,
  '0.51': 1654,
  '0.52': 1700,
  '0.53': 1745,
  '0.54': 1792,
  '0.55': 1838,
  '0.56': 1885,
  '0.57': 1932,
  '0.58': 1979,
  '0.59': 2026,
  '0.60': 2074,
  '0.61': 2121,
  '0.62': 2169,
  '0.63': 2218,
  '0.64': 2266,
  '0.65': 2315,
  '0.66': 2363,
  '0.67': 2412,
  '0.68': 2461,
  '0.69': 2511,
  '0.70': 2560,
  '0.71': 2610,
  '0.72': 2659,
  '0.73': 2709,
  '0.74': 2759,
  '0.75': 2809,
  '0.76': 2859,
  '0.77': 2910,
  '0.78': 2960,
  '0.79': 3011,
  '0.80': 3061,
  '0.81': 3112,
  '0.82': 3163,
  '0.83': 3214,
  '0.84': 3265,
  '0.85': 3316,
  '0.86': 3367,
  '0.87': 3418,
  '0.88': 3469,
  '0.89': 3520,
  '0.90': 3571,
  '0.91': 3622,
  '0.92': 3674,
  '0.93': 3725,
  '0.94': 3776,
  '0.95': 3828,
  '0.96': 3879,
  '0.97': 3930,
  '0.98': 3982,
  '0.99': 4033,
  '1.00': 4084,
  '1.01': 4135,
  '1.02': 4186,
  '1.03': 4238,
  '1.04': 4289,
  '1.05': 4340,
  '1.06': 4391,
  '1.07': 4442,
  '1.08': 4492,
  '1.09': 4543,
  '1.10': 4594,
  '1.11': 4645,
  '1.12': 4695,
  '1.13': 4745,
  '1.14': 4796,
  '1.15': 4846,
  '1.16': 4896,
  '1.17': 4946,
  '1.18': 4996,
  '1.19': 5046,
  '1.20': 5095,
  '1.21': 5145,
  '1.22': 5194,
  '1.23': 5243,
  '1.24': 5292,
  '1.25': 5341,
  '1.26': 5389,
  '1.27': 5438,
  '1.28': 5486,
  '1.29': 5534,
  '1.30': 5582,
  '1.31': 5629,
  '1.32': 5677,
  '1.33': 5724,
  '1.34': 5771,
  '1.35': 5817,
  '1.36': 5864,
  '1.37': 5910,
  '1.38': 5956,
  '1.39': 6001,
  '1.40': 6047,
  '1.41': 6092,
  '1.42': 6136,
  '1.43': 6181,
  '1.44': 6225,
  '1.45': 6269,
  '1.46': 6312,
  '1.47': 6355,
  '1.48': 6398,
  '1.49': 6440,
  '1.50': 6482,
  '1.51': 6524,
  '1.52': 6565,
  '1.53': 6606,
  '1.54': 6647,
  '1.55': 6687,
  '1.56': 6726,
  '1.57': 6765,
  '1.58': 6804,
  '1.59': 6842,
  '1.60': 6880,
  '1.61': 6917,
  '1.62': 6953,
  '1.63': 6990,
  '1.64': 7025,
  '1.65': 7060,
  '1.66': 7094,
  '1.67': 7128,
  '1.68': 7161,
  '1.69': 7194,
  '1.70': 7226,
  '1.71': 7257,
  '1.72': 7287,
  '1.73': 7317,
  '1.74': 7346,
  '1.75': 7374,
  '1.76': 7401,
  '1.77': 7428,
  '1.78': 7453,
  '1.79': 7477,
  '1.80': 7501,
  '1.81': 7523,
  '1.82': 7544,
  '1.83': 7564,
  '1.84': 7583,
  '1.85': 7600,
  '1.86': 7616,
  '1.87': 7630,
  '1.88': 7641,
  '1.89': 7650,
  '1.90': 7675,
  '1.91': 7688,
  '1.92': 7701,
  '1.93': 7714,
  '1.94': 7727,
  '1.95': 7740,
  '1.96': 7753,
  '1.97': 7766,
  '1.98': 7779
};

/**
 * Converte medida em centímetros para volume em litros
 * @param cm - Medida em centímetros (formato: "1.50")
 * @returns Volume em litros ou null se não encontrado
 */
export const convertCmToVolume = (cm: string): number | null => {
  const normalizedCm = parseFloat(cm).toFixed(2);
  return dieselLevelTable[normalizedCm] || null;
};

/**
 * Busca o valor em CM mais próximo para um volume específico
 * @param volume - Volume em litros
 * @returns Medida em CM ou null se não encontrado
 */
export const findClosestCmForVolume = (volume: number): string | null => {
  let closestCm = null;
  let smallestDiff = Infinity;
  
  for (const [cm, vol] of Object.entries(dieselLevelTable)) {
    const diff = Math.abs(vol - volume);
    if (diff < smallestDiff) {
      smallestDiff = diff;
      closestCm = cm;
    }
  }
  
  return closestCm;
};

/**
 * Obtém todas as opções de CM disponíveis para um select
 * @returns Array de opções ordenadas
 */
export const getCmOptions = (): Array<{ value: string; label: string }> => {
  return Object.keys(dieselLevelTable)
    .sort((a, b) => parseFloat(a) - parseFloat(b))
    .map(cm => ({
      value: cm,
      label: `${cm} cm`
    }));
};
